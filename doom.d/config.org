#+TITLE: Doom Config
#+startup: show2levels

* Doom Configuration

#+begin_src emacs-lisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

** Contact

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Jonathna Peel"
      user-mail-address "me@jonathanpeel.co.za")
#+end_src

** Theme and Display
*** Fonts

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:

This is the font, with *bold* and /italic/. can tell be the "r"



#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Fira Mono" :size 16 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 19))
#+end_src

#+RESULTS:
: #<font-spec nil nil Fira\ Sans nil nil nil nil nil 19 nil nil nil nil>

*** Theme

;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:

#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-dracula)
#+end_src

*** Display line numbers

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type t)
#+end_src

*** COMMENT Full Screen

#+begin_src emacs-lisp :tangle yes
(add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+end_src

* Emacs Server
#+begin_src emacs-lisp :tangle yes
(server-start)
#+end_src
* org-mode

** Basic configuration
*** Org Directories

#+begin_src emacs-lisp :tangle yes
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/OneDrive/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src

*** COMMENT Org Contacts

#+begin_src emacs-lisp :tangle yes
(setq org-contacts-files '("contacts.org"))
#+end_src

** Accademic writing
*** COMMENT Citar

#+begin_src emacs-lisp :tangle yes
(setq! citar-bibliography '("~/OneDrive/References/index.bib"))
(setq! citar-library-paths '("~/OneDrive/References/")
       citar-notes-paths '("~/OneDrive/References/notes/"))
#+end_src
*** OX LaTeX

**** Minted code bloack

#+begin_src emacs-lisp :tangle yes
(setq org-latex-listings 'minted)
#+end_src

** Visual Tweaks
*** Basic tweaks

#+begin_src emacs-lisp :tangle yes
(setq org-fontify-done-headline nil
      org-hide-emphasis-markers t)
#+end_src

*** Centre text / width

#+begin_src emacs-lisp :tangle yes
(add-hook! 'org-mode-hook
  (setq visual-fill-column-width 120
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
#+end_src

*** org-pretty-tags

#+begin_src emacs-lisp :tangle yes
(use-package org-pretty-tags
  :demand t
  :config
   (setq org-pretty-tags-surrogate-strings
         (quote
          (
           ("CLR"   . "‚òÄ")
           ("DZ"    . "üå¶")
           ("RA"    . "üåß")
           ("TS"    . "‚õà")
           ("TSRA"  . "‚õà")
           ("SN"    . "üå®")
           ("SCT"   . "üå§")
           ("BKN"   . "üå§")
           ("OVC"   . "‚òÅ")

           ("dev"  . "üíª")
           ("del"  . "üöö")
           ("plan" . "üìù")
           ("meet" . "üìû")

           ("work"  . "‚öí")
           ("birthday" . "üéÇ")

                )))
   (org-pretty-tags-global-mode))
#+end_src

*** tag colours

#+begin_src emacs-lisp :tangle yes
(setq org-todo-keyword-faces
  '(("MEET" . "#E35DBF")
    ("PLAN" . "4d4d4d")
    ("CANCELED" . (:foreground "white" :background "#4d4d4d" :weight bold))
    ("POSTPONED" . "#008080")))
#+end_src

#+RESULTS:
: ((MEET . #E35DBF) (CANCELED :foreground white :background #4d4d4d :weight bold) (POSTPONED . #008080))

* org-roam

#+begin_src emacs-lisp :tangle yes
(after! org-roam
  (setq org-roam-directory (concat org-directory "/roam"))
  (setq org-roam-completion-everywhere t))
#+end_src

*** Capture templates

#+begin_src emacs-lisp :tangle yes
(defvar zmy-location-tag-options "@%^{LOCATION|Krasnodar|Adler}")
(defvar zmy-wether-tag-options "%^{WEATHER|CLR|DZ|RA|TS|TSRA|SN|SCT|BKN|OVC|BR|}")
(defvar zmy-tags (concat ":" zmy-location-tag-options ":" zmy-wether-tag-options ":"))
(defvar zmy-dailys-entry-template (concat "* %T " zmy-tags " \n%?"))

(setq org-roam-dailies-capture-templates
      `(("d" "Journal" entry ,zmy-dailys-entry-template
         :target (file+datetree "%<%Y>.org" ""))))
#+end_src

*** COMMENT org-roam-ui

#+begin_src emacs-lisp :tangle yes
(use-package! org-roam-ui
  :after org-roam
  :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

* Plant UML

Plant UML needs a path to the jar or exec file.
I have installed plantuml with the distro's package manager

#+begin_src emacs-lisp :tangle yes
(setq org-plantuml-jar-path "/home/me/bin/plantuml.jar")
(setq org-plantuml-default-exec-mode 'executable)
(setq plantuml-default-exec-mode 'executable)
#+end_src

* COMMENT Email

** MU4E

Setting up mu4e which is an email client that works within emacs.  You must install mu4e and mbsync through your Linux distribution‚Äôs package manager. Setting up smtp for sending mail. Make sure the gnutls command line utils are installed. Package ‚Äògnutls-bin‚Äô in Debian/Ubuntu, and ‚Äògnutls‚Äô in Arch.

#+begin_src emacs-lisp :tangle yes
    (setq mu4e-get-mail-command "mbsync -c ~/.mbsyncrc -a"
      mu4e-update-interval  300
      user-mail-address "JonathanP@polymorphic.group"
      user-full-name  "Jonathan Peel"
      mu4e-compose-signature
       (concat
         ""
         "")
      message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials '(("outlook.office365.com" 587 nil nil))
      smtpmail-auth-credentials '(("outlook.office365.com" 587 "jonathanp@polymorphic.group" nil))
      smtpmail-default-smtp-server "outlook.office365.com"
      smtpmail-smtp-server "outlook.office365.com"
      smtpmail-smtp-service 587
      mu4e-sent-folder "/Sent"
      mu4e-drafts-folder "/Drafts"
      mu4e-trash-folder "/Trash"
      mu4e-refile-folder "/All Mail"
      mu4e-maildir-shortcuts
      '(("/jonathan-polymorphic/Inbox"    . ?i)
        ("/jonathan-polymorphic/Sent"     . ?s)
        ("/jonathan-polymorphic/All Mail" . ?a)
        ("/jonathan-polymorphic/Trash"    . ?t)))
#+end_src
